648   = Fetchmail Grows Up =
649
650   There I was with a neat and innovative design, code that I knew worked well because I used it every
651   day, and a burgeoning beta list. It gradually dawned on me that I was no longer engaged in a trivial
652   personal hack that might happen to be useful to few other people. I had my hands on a program that
653   every hacker with a Unix box and a SLIP/PPP mail connection really needs.
654
655   With the SMTP forwarding feature, it pulled far enough in front of the competition to potentially
656   become a "category killer", one of those classic programs that fills its niche so competently that
657   the alternatives are not just discarded but almost forgotten.
658
659   I think you can't really aim or plan for a result like this. You have to get pulled into it by
660   design ideas so powerful that afterward the results just seem inevitable, natural, even
661   foreordained. The only way to try for ideas like that is by having lots of ideas—or by having the
662   engineering judgment to take other peoples' good ideas beyond where the originators thought they
663   could go.
664
665   Andy Tanenbaum had the original idea to build a simple native Unix for IBM PCs, for use as a
666   teaching tool (he called it Minix). Linus Torvalds pushed the Minix concept further than Andrew
667   probably thought it could go—and it grew into something wonderful. In the same way (though on a
668   smaller scale), I took some ideas by Carl Harris and Harry Hochheiser and pushed them hard. Neither
669   of us was 'original' in the romantic way people think is genius. But then, most science and
670   engineering and software development isn't done by original genius, hacker mythology to the
671   contrary.
672
673   The results were pretty heady stuff all the same—in fact, just the kind of success every hacker
674   lives for! And they meant I would have to set my standards even higher. To make fetchmail as good as
675   I now saw it could be, I'd have to write not just for my own needs, but also include and support
676   features necessary to others but outside my orbit. And do that while keeping the program simple and
677   robust.
678
679   The first and overwhelmingly most important feature I wrote after realizing this was multidrop
680   support—the ability to fetch mail from mailboxes that had accumulated all mail for a group of users,
681   and then route each piece of mail to its individual recipients.
682
683   I decided to add the multidrop support partly because some users were clamoring for it, but mostly
684   because I thought it would shake bugs out of the single-drop code by forcing me to deal with
685   addressing in full generality. And so it proved.  Getting RFC 822 address parsing right took me a
686   remarkably long time, not because any individual piece of it is hard but because it involved a pile
687   of interdependent and fussy details.
688
689   But multidrop addressing turned out to be an excellent design decision as well. Here's how I knew:
690
691       14. Any tool should be useful in the expected way, but a truly great tool lends itself to uses
692           you never expected.
693
694   The unexpected use for multidrop fetchmail is to run mailing lists with the list kept, and alias
695   expansion done, on the client side of the Internet connection. This means someone running a personal
696   machine through an ISP account can manage a mailing list without continuing access to the ISP's
697   alias files.
698
699   Another important change demanded by my beta-testers was support for 8-bit MIME (Multipurpose
700   Internet Mail Extensions) operation. This was pretty easy to do, because I had been careful to keep
701   the code 8-bit clean (that is, to not press the 8th bit, unused in the ASCII character set, into
702   service to carry information within the program). Not because I anticipated the demand for this
703   feature, but rather in obedience to another rule:
704
705       15. When writing gateway software of any kind, take pains to disturb the data stream as little
706           as possible—and never throw away information unless the recipient forces you to!
707
708   Had I not obeyed this rule, 8-bit MIME support would have been difficult and buggy. As it was, all I
709   had to do is read the MIME standard (RFC 1652) and add a trivial bit of header-generation logic.
710
711   Some European users bugged me into adding an option to limit the number of messages retrieved per
712   session (so they can control costs from their expensive phone networks). I resisted this for a long
713   time, and I'm still not entirely happy about it. But if you're writing for the world, you have to
714   listen to your customers—this doesn't change just because they're not paying you in money.
715
716   = A Few More Lessons from Fetchmail =
717
718   Before we go back to general software-engineering issues, there are a couple more specific lessons
719   from the fetchmail experience to ponder. Nontechnical readers can safely skip this section.
720
721   The rc (control) file syntax includes optional 'noise' keywords that are entirely ignored by the
722   parser. The English-like syntax they allow is considerably more readable than the traditional terse
723   keyword-value pairs you get when you strip them all out.
724
725   These started out as a late-night experiment when I noticed how much the rc file declarations were
726   beginning to resemble an imperative minilanguage. (This is also why I changed the original popclient
727   "server" keyword to "poll").
728
729   It seemed to me that trying to make that imperative minilanguage more like English might make it
730   easier to use. Now, although I'm a convinced partisan of the "make it a language" school of design
731   as exemplified by Emacs and HTML and many database engines, I am not normally a big fan of
732   "English-like" syntaxes.
733
734   Traditionally programmers have tended to favor control syntaxes that are very precise and compact
735   and have no redundancy at all. This is a cultural legacy from when computing resources were
736   expensive, so parsing stages had to be as cheap and simple as possible. English, with about 50%
737   redundancy, looked like a very inappropriate model then.
738
739   This is not my reason for normally avoiding English-like syntaxes; I mention it here only to
740   demolish it. With cheap cycles and core, terseness should not be an end in itself. Nowadays it's
741   more important for a language to be convenient for humans than to be cheap for the computer.
742
743   There remain, however, good reasons to be wary. One is the complexity cost of the parsing stage—you
744   don't want to raise that to the point where it's a significant source of bugs and user confusion in
745   itself. Another is that trying to make a language syntax English-like often demands that the
746   "English" it speaks be bent seriously out of shape, so much so that the superficial resemblance to
747   natural language is as confusing as a traditional syntax would have been. (You see this bad effect
748   in a lot of so-called "fourth generation" and commercial database-query languages.)
749
750   The fetchmail control syntax seems to avoid these problems because the language domain is extremely
751   restricted. It's nowhere near a general-purpose language; the things it says simply are not very
752   complicated, so there's little potential for confusion in moving mentally between a tiny subset of
753   English and the actual control language. I think there may be a broader lesson here:
754
755       16. When your language is nowhere near Turing-complete, syntactic sugar can be your friend.
756
757   Another lesson is about security by obscurity. Some fetchmail users asked me to change the software
758   to store passwords encrypted in the rc file, so snoopers wouldn't be able to casually see them.
759
760   I didn't do it, because this doesn't actually add protection. Anyone who's acquired permissions to
761   read your rc file will be able to run fetchmail as you anyway—and if it's your password they're
762   after, they'd be able to rip the necessary decoder out of the fetchmail code itself to get it.
763
764   All .fetchmailrc password encryption would have done is give a false sense of security to people who
765   don't think very hard. The general rule here is:
766
767       17. A security system is only as secure as its secret. Beware of pseudo-secrets.
768
769
770   = Necessary Preconditions for the Bazaar Style =
