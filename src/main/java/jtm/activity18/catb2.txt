74    = The Mail Must Get Through =
75

93
94    I needed a POP3 client. So I went out on the Internet and found one. Actually, I found three or
95    four. I used one of them for a while, but it was missing what seemed an obvious feature, the ability
96    to hack the addresses on fetched mail so replies would work properly.
97
98    The problem was this: suppose someone named 'joe' on locke sent me mail. If I fetched the mail to
99    snark and then tried to reply to it, my mailer would cheerfully try to ship it to a nonexistent
100   'joe' on snark. Hand-editing reply addresses to tack on <@ccil.org> quickly got to be a serious
101   pain.
102
103   This was clearly something the computer ought to be doing for me. But none of the existing POP
104   clients knew how! And this brings us to the first lesson:
105
106       1. Every good work of software starts by scratching a developer's personal itch.
107
108   Perhaps this should have been obvious (it's long been proverbial that "Necessity is the mother of
109   invention") but too often software developers spend their days grinding away for pay at programs
110   they neither need nor love. But not in the Linux world—which may explain why the average quality of
111   software originated in the Linux community is so high.
112
113   So, did I immediately launch into a furious whirl of coding up a brand-new POP3 client to compete
114   with the existing ones? Not on your life! I looked carefully at the POP utilities I had in hand,
115   asking myself "Which one is closest to what I want?" Because:
116
117       2. Good programmers know what to write. Great ones know what to rewrite (and reuse).
118
119   While I don't claim to be a great programmer, I try to imitate one. An important trait of the great
120   ones is constructive laziness. They know that you get an A not for effort but for results, and that
121   it's almost always easier to start from a good partial solution than from nothing at all.
122
123   Linus Torvalds, for example, didn't actually try to write Linux from scratch. Instead, he started by
124   reusing code and ideas from Minix, a tiny Unix-like operating system for PC clones. Eventually all
125   the Minix code went away or was completely rewritten—but while it was there, it provided scaffolding
126   for the infant that would eventually become Linux.
127
128   In the same spirit, I went looking for an existing POP utility that was reasonably well coded, to
129   use as a development base.
130
131   The source-sharing tradition of the Unix world has always been friendly to code reuse (this is why
132   the GNU project chose Unix as a base OS, in spite of serious reservations about the OS itself). The
133   Linux world has taken this tradition nearly to its technological limit; it has terabytes of open
134   sources generally available. So spending time looking for some else's almost-good-enough is more
135   likely to give you good results in the Linux world than anywhere else.
136
137   And it did for me. With those I'd found earlier, my second search made up a total of nine
138   candidates—fetchpop, PopTart, get-mail, gwpop, pimp, pop-perl, popc, popmail and upop. The one I
139   first settled on was 'fetchpop' by Seung-Hong Oh. I put my header-rewrite feature in it, and made
140   various other improvements which the author accepted into his 1.9 release.
141
142   A few weeks later, though, I stumbled across the code for popclient by Carl Harris, and found I had
143   a problem. Though fetchpop had some good original ideas in it (such as its background-daemon mode),
144   it could only handle POP3 and was rather amateurishly coded (Seung-Hong was at that time a bright
145   but inexperienced programmer, and both traits showed).  Carl's code was better, quite professional
146   and solid, but his program lacked several important and rather tricky-to-implement fetchpop features
147   (including those I'd coded myself).
148
149   Stay or switch? If I switched, I'd be throwing away the coding I'd already done in exchange for a
150   better development base.
151

173
174   Without my actually noticing, the project had escalated. No longer was I just contemplating minor
175   patches to an existing POP client. I took on maintaining an entire one, and there were ideas
176   bubbling in my head that I knew would probably lead to major changes.
177
178   In a software culture that encourages code-sharing, this is a natural way for a project to evolve. I
179   was acting out this principle:
180
181       4. If you have the right attitude, interesting problems will find you.
182
183   But Carl Harris's attitude was even more important. He understood that
184
185       5. When you lose interest in a program, your last duty to it is to hand it off to a competent
186          successor.
187
188   Without ever having to discuss it, Carl and I knew we had a common goal of having the best solution
189   out there. The only question for either of us was whether I could establish that I was a safe pair
190   of hands. Once I did that, he acted with grace and dispatch. I hope I will do as well when it comes
191   my turn.
192
193   = The Importance of Having Users =
194
195   And so I inherited popclient. Just as importantly, I inherited popclient's user base. Users are
196   wonderful things to have, and not just because they demonstrate that you're serving a need, that
197   you've done something right. Properly cultivated, they can become co-developers.
198
199   Another strength of the Unix tradition, one that Linux pushes to a happy extreme, is that a lot of
200   users are hackers too. Because source code is available, they can be effective hackers. This can be
201   tremendously useful for shortening debugging time. Given a bit of encouragement, your users will
202   diagnose problems, suggest fixes, and help improve the code far more quickly than you could unaided.
203
204       6. Treating your users as co-developers is your least-hassle route to rapid code improvement and
205          effective debugging.
206
207   The power of this effect is easy to underestimate. In fact, pretty well all of us in the open-source
208   world drastically underestimated how well it would scale up with number of users and against system
209   complexity, until Linus Torvalds showed us differently.
210
211   In fact, I think Linus's cleverest and most consequential hack was not the construction of the Linux
212   kernel itself, but rather his invention of the Linux development model. When I expressed this
213   opinion in his presence once, he smiled and quietly repeated something he has often said: "I'm
214   basically a very lazy person who likes to get credit for things other people actually do." Lazy like
215   a fox. Or, as Robert Heinlein famously wrote of one of his characters, too lazy to fail.
216
217   In retrospect, one precedent for the methods and success of Linux can be seen in the development of
218   the GNU Emacs Lisp library and Lisp code archives. In contrast to the cathedral-building style of
219   the Emacs C core and most other GNU tools, the evolution of the Lisp code pool was fluid and very
220   user-driven. Ideas and prototype modes were often rewritten three or four times before reaching a
221   stable final form. And loosely-coupled collaborations enabled by the Internet, a la Linux, were
222   frequent.
223
224   Indeed, my own most successful single hack previous to fetchmail was probably Emacs VC (version
225   control) mode, a Linux-like collaboration by email with three other people, only one of whom
226   (Richard Stallman, the author of Emacs and founder of the Free Software Foundation) I have met to
227   this day. It was a front-end for SCCS, RCS and later CVS from within Emacs that offered "one-touch"
228   version control operations. It evolved from a tiny, crude sccs.el mode somebody else had written.
229   And the development of VC succeeded because, unlike Emacs itself, Emacs Lisp code could go through
230   release/test/improve generations very quickly.
231
232   The Emacs story is not unique. There have been other software products with a two-level architecture
233   and a two-tier user community that combined a cathedral-mode core and a bazaar-mode toolbox. One
234   such is MATLAB, a commercial data-analysis and visualization tool. Users of MATLAB and other
235   products with a similar structure invariably report that the action, the ferment, the innovation
236   mostly takes place in the open part of the tool where a large and varied community can tinker with
237   it.
238
239   = Release Early, Release Often =
